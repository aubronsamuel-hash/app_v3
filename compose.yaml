services:
  db:
    image: postgres:15
    env_file: .env
    volumes:
      - ./data/db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks: [appnet]

  db-init:
    image: postgres:15
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./sql:/sql:ro
    command: >
      bash -lc "
      psql -h db -U ${POSTGRES_USER} -d ${POSTGRES_DB} -f /sql/schema.sql &&
      psql -h db -U ${POSTGRES_USER} -d ${POSTGRES_DB} -f /sql/seed_admin.sql
      "
    restart: "no"
    networks: [appnet]

  api:
    build: ./api
    command: gunicorn -k uvicorn.workers.UvicornWorker -w 4 -b 0.0.0.0:8001 app.main:app
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
    ports:
      - "8001:8001"
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8001/healthz').status==200 else 1)\""]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks: [appnet]

  frontend:
    build: ./frontend
    command: npm run preview -- --host 0.0.0.0 --port 5173
    env_file: .env
    depends_on:
      - api
    ports:
      - "5173:5173"
    healthcheck:
      test: ["CMD-SHELL", "node -e \"fetch('http://localhost:5173/').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))\""]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks: [appnet]

  proxy:
    image: caddy:2.8
    volumes:
      - ./ops/Caddyfile:/etc/caddy/Caddyfile
    depends_on:
      - api
      - frontend
    ports:
      - "80:80"
    healthcheck:
      test: ["CMD", "caddy", "validate", "--config", "/etc/caddy/Caddyfile"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks: [appnet]

networks:
  appnet:
    driver: bridge
